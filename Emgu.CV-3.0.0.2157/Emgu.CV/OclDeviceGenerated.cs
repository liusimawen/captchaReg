//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV
{
   public static partial class CvInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceMaxWorkGroupSize(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceMaxComputeUnits(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceLocalMemSize(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceMaxMemAllocSize(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceDeviceVersionMajor(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceDeviceVersionMinor(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceDoubleFPConfig(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceHostUnifiedMemory(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceGlobalMemSize(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceImage2DMaxWidth(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclDeviceImage2DMaxHeight(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern OclDeviceType cveOclDeviceType(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclDeviceName(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclDeviceVersion(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclDeviceVendorName(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclDeviceDriverVersion(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclDeviceExtensions(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclDeviceOpenCLVersion(IntPtr obj, IntPtr str);
     
   }

   public partial class OclDevice
   {

     /// <summary>
     /// The maximum work group size
     /// </summary>
     public int MaxWorkGroupSize
     {
        get { return CvInvoke.cveOclDeviceMaxWorkGroupSize(_ptr); } 
     }
     
     /// <summary>
     /// The max compute unit
     /// </summary>
     public int MaxComputeUnits
     {
        get { return CvInvoke.cveOclDeviceMaxComputeUnits(_ptr); } 
     }
     
     /// <summary>
     /// The local memory size
     /// </summary>
     public int LocalMemSize
     {
        get { return CvInvoke.cveOclDeviceLocalMemSize(_ptr); } 
     }
     
     /// <summary>
     /// The maximum memory allocation size
     /// </summary>
     public int MaxMemAllocSize
     {
        get { return CvInvoke.cveOclDeviceMaxMemAllocSize(_ptr); } 
     }
     
     /// <summary>
     /// The device major version number
     /// </summary>
     public int DeviceVersionMajor
     {
        get { return CvInvoke.cveOclDeviceDeviceVersionMajor(_ptr); } 
     }
     
     /// <summary>
     /// The Device minor version number
     /// </summary>
     public int DeviceVersionMinor
     {
        get { return CvInvoke.cveOclDeviceDeviceVersionMinor(_ptr); } 
     }
     
     /// <summary>
     /// The device double float point configuration
     /// </summary>
     public int DoubleFPConfig
     {
        get { return CvInvoke.cveOclDeviceDoubleFPConfig(_ptr); } 
     }
     
     /// <summary>
     /// True if the device use unified memory
     /// </summary>
     public int HostUnifiedMemory
     {
        get { return CvInvoke.cveOclDeviceHostUnifiedMemory(_ptr); } 
     }
     
     /// <summary>
     /// The global memory size
     /// </summary>
     public int GlobalMemSize
     {
        get { return CvInvoke.cveOclDeviceGlobalMemSize(_ptr); } 
     }
     
     /// <summary>
     /// The image 2d max width
     /// </summary>
     public int Image2DMaxWidth
     {
        get { return CvInvoke.cveOclDeviceImage2DMaxWidth(_ptr); } 
     }
     
     /// <summary>
     /// The image2d max height
     /// </summary>
     public int Image2DMaxHeight
     {
        get { return CvInvoke.cveOclDeviceImage2DMaxHeight(_ptr); } 
     }
     
     /// <summary>
     /// The ocl device type
     /// </summary>
     public OclDeviceType Type
     {
        get { return CvInvoke.cveOclDeviceType(_ptr); } 
     }
     
     /// <summary>
     /// The device name
     /// </summary>
     public String Name
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclDeviceName(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device version
     /// </summary>
     public String Version
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclDeviceVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device vendor name
     /// </summary>
     public String VendorName
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclDeviceVendorName(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device driver version
     /// </summary>
     public String DriverVersion
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclDeviceDriverVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device extensions
     /// </summary>
     public String Extensions
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclDeviceExtensions(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The device OpenCL version
     /// </summary>
     public String OpenCLVersion
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclDeviceOpenCLVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
   }
}