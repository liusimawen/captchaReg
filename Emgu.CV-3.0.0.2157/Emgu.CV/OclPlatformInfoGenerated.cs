//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV
{
   public static partial class CvInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclPlatformInfoName(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclPlatformInfoVersion(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveOclPlatformInfoVendor(IntPtr obj, IntPtr str);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveOclPlatformInfoDeviceNumber(IntPtr obj);
     
   }

   public partial class OclPlatformInfo
   {

     /// <summary>
     /// The platform name
     /// </summary>
     public String Name
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclPlatformInfoName(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The platform version
     /// </summary>
     public String Version
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclPlatformInfoVersion(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The platform vendor
     /// </summary>
     public String Vendor
     {
        get 
        { 
           using (CvString s = new CvString())
           {  
              CvInvoke.cveOclPlatformInfoVendor(_ptr, s); 
              return s.ToString();
           }
        } 
     }
     
     /// <summary>
     /// The number of devices
     /// </summary>
     public int DeviceNumber
     {
        get { return CvInvoke.cveOclPlatformInfoDeviceNumber(_ptr); } 
     }
     
   }
}